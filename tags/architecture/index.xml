<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>architecture on Roomy</title>
    <link>https://wacilpong.github.io/blog/tags/architecture/</link>
    <description>Recent content in architecture on Roomy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wacilpong.github.io/blog/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>After reading clean architecture, by Robert C. Martine</title>
      <link>https://wacilpong.github.io/blog/post/after-reading-clean-architecture/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/after-reading-clean-architecture/</guid>
      <description>클린 아키텍쳐를 읽고 내맘대로 정리해보았다.
컴포넌트 모든 언어에서 컴포넌트는 배포할 수 있는 단위 입자
 동일한 시점에 동일한 이유로 변경되는 것들을 한데 묶고, 서로 다른 시점에 다른 이유로 변경되는 것들은 서로 분리하자. 필요하지 않는 것에 의존하지 말자. 컴포넌트에 대한 균형적인 응집 : 프로젝트 초기에 재사용성을 고민하는 것은 비효율적이다. 컴포넌트가 의존하는 그래프에 순환이 있으면 안된다. 순환이 생기면 그 순환 속에 있는 모든 컴포넌트가 동일한 릴리즈를 사용해야 한다. 그러나 프로젝트 초기부터 설계할 수 있는 대상이 아니기 때문에, 여러 순환 고리가 생기는 시점에 드디어 재사용성(!</description>
    </item>
    
  </channel>
</rss>