<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Roomy</title>
    <link>https://wacilpong.github.io/blog/</link>
    <description>Recent content on Roomy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Fri, 09 Dec 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wacilpong.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reading rust-lang book</title>
      <link>https://wacilpong.github.io/blog/project/rust-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/project/rust-book/</guid>
      <description>Capters  Getting Started Guessing Game Common Programming Concepts Understanding Ownership Using Structs to Structure Related Data Enums and Pattern Matching Managing Growing Projects with Packages, Crates, and Modules Common Collections Error Handling Generic Types, Traits, and Lifetimes Writing Automated Tests An I/O Project: Building a Command Line Program Functional Language Features: Iterators and Closures More About Cargo and Crates.io Smart Pointers Fearless Concurrency Object-Oriented Programming Features of Rust Patterns and Matching Advanced Features Patterns and Matching  </description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s dapping blockchain story</title>
      <link>https://wacilpong.github.io/blog/project/blockchain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/project/blockchain/</guid>
      <description>Lectures  What is Blockchain? Bitcoin? Altcoin? ICO? 3rd Generation Blockchain &amp;amp; Just Starting Blockchain ! Just Make Your Genesis Block &amp;amp; Blockchain Coding Solidity Blockchain MUST BE associated with Open Source My token economy example project: Toon Hub Cosmos Blockchain: internet of interchain Truffle with ganache Truffle Tutorial: Pet Shop  </description>
    </item>
    
    <item>
      <title>SlackBot: Dumbledore</title>
      <link>https://wacilpong.github.io/blog/project/dumbledore/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/project/dumbledore/</guid>
      <description></description>
    </item>
    
    <item>
      <title>refactoring 2: basic</title>
      <link>https://wacilpong.github.io/blog/study/refactoring/2/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/refactoring/2/</guid>
      <description>리팩터링이란? 리팩터링은 소프트웨어의 동작은 유지한 채, 코드를 이해하고 수정하기 쉽도록 내부 구조를 변경하는 것이다. 리팩터링을 하는 동안에는 코드가 항상 정</description>
    </item>
    
    <item>
      <title>refactoring 1: let&#39;s start</title>
      <link>https://wacilpong.github.io/blog/study/refactoring/1/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/refactoring/1/</guid>
      <description>함수 추출하기 프로그램이 새로운 기능을 추가하기에 편한 구조가 아니라면, 먼저 기능을 추가하기 쉬운 형태로 리팩터링하고 나서 원하는 기능을 추가하자. 한번에 너무</description>
    </item>
    
    <item>
      <title>kube 2</title>
      <link>https://wacilpong.github.io/blog/study/kubernetes/2/</link>
      <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/kubernetes/2/</guid>
      <description>시작하세요! 도커/쿠버네티스 6장 읽기 쿠버네티스는 대부분의 리소스를 &amp;lsquo;오브젝트&#39;라고 불리는 형태로 관리한다. 컨테이너의 집합(Pods)</description>
    </item>
    
    <item>
      <title>kube 1</title>
      <link>https://wacilpong.github.io/blog/study/kubernetes/1/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/kubernetes/1/</guid>
      <description>~ 도커 컨테이너에서 기본 사용자는 root, 호스트 이름은 무작위 16진수 해시값이다. docker run 컨테이너 생성 시 -i로 상호입출력, -t로 tty 활성화하여 bash를 사용하</description>
    </item>
    
    <item>
      <title>모두를 위한 클라우드 컴퓨팅 7</title>
      <link>https://wacilpong.github.io/blog/study/cloud-computing/7/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/cloud-computing/7/</guid>
      <description>도커와 젠킨스를 이용한 CI/CD 파이프라인 구성 CI (Continuous Integration) 개발자가 작성한 코드가 특정 시간이 아닌 지속적으로 배포되어야 할 통합본에 통합되는 것 이를 통해 언제든지 필요에 따</description>
    </item>
    
    <item>
      <title>모두를 위한 클라우드 컴퓨팅 6</title>
      <link>https://wacilpong.github.io/blog/study/cloud-computing/6/</link>
      <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/cloud-computing/6/</guid>
      <description>쿠버네티스(Kubernetes) 등장 배경 소프트웨어 배포 방식의 변화 전통적 배포 방식 한 대의 물리서버에 여러 애플리케이션이 동작 각 애플리케이션 리소스 제</description>
    </item>
    
    <item>
      <title>모두를 위한 클라우드 컴퓨팅 5</title>
      <link>https://wacilpong.github.io/blog/study/cloud-computing/5/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/cloud-computing/5/</guid>
      <description>컨테이너 샌드박스(sandbox)화된 런타임 환경 샌드박스화되었다는 의미는 프로세스가 보호된 영역에서 동작한다는 것이다. 따라서 호스트 시스템에 부정적</description>
    </item>
    
    <item>
      <title>모두를 위한 클라우드 컴퓨팅 4</title>
      <link>https://wacilpong.github.io/blog/study/cloud-computing/4/</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/cloud-computing/4/</guid>
      <description>AWS 루트 사용자는 모든 리소스에 대한 액세스 권한을 갖는 계정이다. IAM(Identity and Access Management) 계정은 특정한 권한에 대한 제약을 갖는다. 가상머신 만들기 서비스 &amp;gt; EC2 &amp;gt; 인스턴스 시작 &amp;gt;</description>
    </item>
    
    <item>
      <title>모두를 위한 클라우드 컴퓨팅 3</title>
      <link>https://wacilpong.github.io/blog/study/cloud-computing/3/</link>
      <pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/cloud-computing/3/</guid>
      <description>HTC HPC 환경에서는 하나의 작업을 여러 작업으로 분리한다. 따라서 분리된 작업 처리 과정에서 상호 간 통신이 필요하다. MPI(Message Passing Interface) 방식으로 프로그램을 작성해야 한다. 상호</description>
    </item>
    
    <item>
      <title>모두를 위한 클라우드 컴퓨팅 2</title>
      <link>https://wacilpong.github.io/blog/study/cloud-computing/2/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/cloud-computing/2/</guid>
      <description>클라우드 컴퓨팅의 역사와 모델 유래 존 매카시(John McCarthy)가 1961년 MIT 100주년 기념연설에서 공개적으로 제안했던 유틸리티 컴퓨팅에서 나</description>
    </item>
    
    <item>
      <title>모두를 위한 클라우드 컴퓨팅 1</title>
      <link>https://wacilpong.github.io/blog/study/cloud-computing/1/</link>
      <pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/cloud-computing/1/</guid>
      <description>기본 개념 클라우드 컴퓨팅 데이터 스토리지나 컴퓨팅 파워 같은 컴퓨터 시스템 리소스를 온디맨드 방식으로 제공하는 것이다. 즉, 원하는 시점에 컴퓨팅 자원을 쓸 수 있다</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 20</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-20/</link>
      <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-20/</guid>
      <description>Single-Threaded Web Server // src/main.rs use std::{ fs, io::{prelude::*, BufReader}, net::{TcpListener, TcpStream}, }; fn main() { let listener = TcpListener::bind(&amp;#34;127.0.0.1:7878&amp;#34;).unwrap(); for stream in listener.incoming() { let stream = stream.unwrap(); handle_connection(stream); } } fn handle_connection(mut stream: TcpStream) { let buf_reader = BufReader::new(&amp;amp;mut stream); // calling `next` to get the first item from the iterator. // The first `unwrap` takes care of the `Option` and stops the program if the iterator has</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 19</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-19/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-19/</guid>
      <description>19.2 Advanced Traits 19.2.1 연관 타입으로 트레이트 정의에 자리지정자 타입 선언 pub trait Iterator { type Item; fn next(&amp;amp;mut self) -&amp;gt; Option&amp;lt;Self::Item&amp;gt;; } 자리지정자 타입(placeholder type)으로 트레이트의 메</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 18</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-18/</link>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-18/</guid>
      <description>All the Places Patterns Can Be Used 1-1. match Arms match VALUE { PATTERN =&amp;gt; EXPRESSION, PATTERN =&amp;gt; EXPRESSION, PATTERN =&amp;gt; EXPRESSION, } match x { None =&amp;gt; None, Some(i) =&amp;gt; Some(i + 1), } match 표현식에 사용된 값에 대한 모든 가능성을 반드시 처리해야 한다. 마지막 가지에는</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 17</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-17/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-17/</guid>
      <description>객체지향 언어의 특징 1-1. 데이터와 행위를 정의하는 객체 객체는 데이터와 그 데이터를 운영하는 절차(메서드)를 모아둔 개념이다. 구조체/열거자는 impl 블록을 통해 메</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 16</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-16/</link>
      <pubDate>Sat, 06 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-16/</guid>
      <description>다중 프로세서를 사용할 수록 동시성과 병렬 처리가 중요해지고 있다. 이 챕터에서 동시성을 말할 때 개념적으로 병렬 처리라고 생각해도 된다. 코드를 동시에 실행하기 위</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 15</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-15/</link>
      <pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-15/</guid>
      <description>포인터(pointer)는 메모리에 주소를 가지고 있는 변수를 일컫는 보편적인 개념이다. 러스트에서 가장 대중적인 포인터는 &amp;amp;기호를 사용한 참조, 변</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 14</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-14/</link>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-14/</guid>
      <description>릴리즈 프로필을 이용한 빌드 커스터마이징 // Cargo.toml [profile.dev] opt-level = 0 [profile.release] opt-level = 3 cargo build: dev 프로필을 사용하고, --release를 붙이면 release 프로필을 쓴다. opt-level: 러스트가 코드에 적</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 13</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-13/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-13/</guid>
      <description>클로저(Closures): 주변 환경을 캡처하는 익명함수 러스트의 클로저는 변수에 저장하거나 다른 함수에 인자로 전달하는 익명함수다. 일반 함수와 달리 클로</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 12</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-12/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-12/</guid>
      <description>Accepting Command Line Arguments Reading the Argument Values use std::env; fn main() { let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); let query = &amp;amp;args[1]; let filename = &amp;amp;args[2]; println!(&amp;#34;검색어: {}&amp;#34;, query); println!(&amp;#34;대상 파일: {}&amp;#34;, filename); } 커맨</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 11</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-11/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-11/</guid>
      <description>러스트의 타입 시스템은 모든 종류의 incorrectness를 잡을 수 없다. 2를 더한 값을 반환하는 add_two 함수가 있을 때, 러스트는 이 함수가 의도한대로 동작하는</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 10</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-10/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-10/</guid>
      <description>Removing Duplication by Extracting a Function // (1) fn main() { let number_list = vec![34, 50, 25, 100, 65]; let mut largest = number_list[0]; for number in number_list { if number &amp;gt; largest { largest = number; } } println!(&amp;#34;The largest number is {}&amp;#34;, largest); } // (2) fn largest(list: &amp;amp;[i32]) -&amp;gt; i32 { let mut largest = list[0]; for &amp;amp;item in list { if item &amp;gt; largest { largest</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 9</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-9/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-9/</guid>
      <description>에러 발생 가능성을 인지하고 개발자가 코드를 컴파일하기 전에 에러를 처리하도록 유도한다. 다른 언어에서는 에러 구분없이 exception으로 처리한다. 러스</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 8</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-8/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-8/</guid>
      <description>Vector // (1) let v: Vec&amp;lt;i32&amp;gt; = Vec::new(); // (2) let v = vec![1, 2, 3]; // (3) let mut v = Vec::new(); v.push(5); v.push(6); v.push(7); v.push(8); 연속된 일련의 값을 저장하는 컬렉션, Vec&amp;lt;T&amp;gt; 모든 값은 메모리상에 연속으로 저장되고, 같은 타입의 값만 저</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 7</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-7/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-7/</guid>
      <description>기능들을 그룹화하고 구현을 캡슐화하는 과정을 통해 코드의 차원을 높일 수 있다. 코드의 어떤 부분을 다른 코드를 위해 공개/비공개할지 정해야 한다. 이는 스코프(s</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 6</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-6/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-6/</guid>
      <description>1. 대수적 타입(Algebraic data type) 러스트의 enum은 함수형 언어들의 대수자료형(algebraic data types)에 가깝다. 정수론은 각종 숫자의</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 5</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-5/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-5/</guid>
      <description>1. 구조체(Structs) 정의와 인스턴스 생성 struct User { active: bool, username: String, email: String, sign_in_count: u64, } fn main() { let user1 = User { email: String::from(&amp;#34;someone@example.com&amp;#34;), username: String::from(&amp;#34;someusername123&amp;#34;), active: true, sign_in_count: 1, }; let mut user2 = User { // same } user2.email = String::from(&amp;#34;anotheremail@example.com&amp;#34;); } 구조체는 튜플</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 4</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-4/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-4/</guid>
      <description>소유권 (Ownership) 배경 ownership은 rust가 메모리를 어떻게 관리하는지에 대해 제어하는 일련의 규칙이다. 가비지 컬렉터나 개발자가 임의로 메모리를 해제하는</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 3</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-3/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-3/</guid>
      <description>Variables and Mutability (1) let fn main() { let x = 5; println!(&amp;#34;The value of x is: {}&amp;#34;, x); x = 6; println!(&amp;#34;The value of x is: {}&amp;#34;, x); } rust에서 모든 변수는 기본적으로 불변하며, 안전하고 쉬운 코드를 작성하기 위함이다. 위</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 2</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-2/</link>
      <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-2/</guid>
      <description>guessing game 입출력 붙이기 use std::io; fn main() { println!(&amp;#34;Guess the number!&amp;#34;); println!(&amp;#34;Please input your guess.&amp;#34;); let mut guess = String::new(); io::stdin() .read_line(&amp;amp;mut guess) .expect(&amp;#34;Failed to read line&amp;#34;); println!(&amp;#34;You guessed: {}&amp;#34;, guess); } io는 prelude: rust standard library에 있다. rust에서 모든 변수는 불변(im</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 1</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-1/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-1/</guid>
      <description>시작! rust같은 low-level의 언어를 공부하면 아래와 같은 점들을 공부할 수 있다. memory management: 메모리 관리 ex. ownership data representation: 모델링 전에 데이터를 어떻게 표현할지? concurrency:</description>
    </item>
    
    <item>
      <title>After reading &lt;From Programmer to Software Architect&gt;</title>
      <link>https://wacilpong.github.io/blog/post/review/after-reading-from-programmer-to-software-architect/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/after-reading-from-programmer-to-software-architect/</guid>
      <description>by Michael Keeling 생각보다 협업할 때 좋은 내용도 많아서 곱씹으면서 읽는 부분이 많았다. - 모듈은 설계 시점에 의미 있고 파일 시스템 상의 어떤 형태로 표현할 수 있으며 소프트웨어</description>
    </item>
    
    <item>
      <title>Typescript mixins in Angular</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/ts-mixin/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/ts-mixin/</guid>
      <description>What ts mixins 믹스인은 객체지향에서 범용적으로 쓰이는 개념으로, 부모클래스가 되지 않으면서 다른 클래스에서 사용할 수 있는 메서드를 포함하는 클래스다. 베이스 클래스</description>
    </item>
    
    <item>
      <title>After reading &lt;Functional Reactive Programming&gt;</title>
      <link>https://wacilpong.github.io/blog/post/review/after-reading-frp/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/after-reading-frp/</guid>
      <description>by Stephen Blackheath, Anthony Jones FRP를 읽고 내맘대로 정리해보았다. java 소듐 라이브러리가 주 예제이고, 뒤로 갈수록 소듐 얘기가 너무 많아서 어려워서 날림 읽었지만 rx기반 지식을 나</description>
    </item>
    
    <item>
      <title>2022</title>
      <link>https://wacilpong.github.io/blog/learned/what-i-learned-2022/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/learned/what-i-learned-2022/</guid>
      <description>2022-11-29 [oh-my-zsh] To fix your permissions you can do so by disabling... 해당 디렉터리의 owner가 현재 user와 다른 경우 발생한다. 계정이 2개일 수 있어서 그냥 에러 메시지를 무시해주기로 했다. $ vi</description>
    </item>
    
    <item>
      <title>Good bye 2021</title>
      <link>https://wacilpong.github.io/blog/post/review/good-bye-2021/</link>
      <pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/good-bye-2021/</guid>
      <description>잘가라 2021년 올해는 운동광인이 되어 운동만 집(재택근무)-운동-집의 반복이어서 특별했던 기억들을 되짚어보며 기록해보자. 분기별 기록 1분기 2분기 3</description>
    </item>
    
    <item>
      <title>After reading &lt;Effecttive Typescript&gt;</title>
      <link>https://wacilpong.github.io/blog/post/review/after-reading-effective-typescript/</link>
      <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/after-reading-effective-typescript/</guid>
      <description>by Dan Vanderkam 모든 자바스크립트는 타입스크립트지만, 그 반대는 성립되지 않는다. js를 ts로 전환하는게 아니면 noImplicitAny를 설정하는 것이 좋다.</description>
    </item>
    
    <item>
      <title>After reading &lt;modern javascript deep dive&gt;</title>
      <link>https://wacilpong.github.io/blog/post/review/after-reading-javascript-deep-dive/</link>
      <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/after-reading-javascript-deep-dive/</guid>
      <description>by 이웅모 무려 900쪽이 넘는 엄청난 분량으로, 읽다가 오? 했던 것만 한번 정리해본다. 기본적인 개념 리터럴(literal) 사람이 이해할 수 있는 문자 또는 약</description>
    </item>
    
    <item>
      <title>After reading &lt;from math to generic programming&gt;</title>
      <link>https://wacilpong.github.io/blog/post/review/after-reading-from-mathematics-to-generic-programming/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/after-reading-from-mathematics-to-generic-programming/</guid>
      <description>by Alexander A. Stepanov, Daniel E. Rose 알고리즘 산책을 읽고 정리해놓고 싶은 것들을 적어놓는다. 읽은 기간은 무려 2020-12-30 ~ 2021-03-31&amp;hellip; 뒤로 갈수록 유클리드 GCD 확장, 스테빈, 뇌터까지 정말 수학을 사랑</description>
    </item>
    
    <item>
      <title>2021</title>
      <link>https://wacilpong.github.io/blog/learned/what-i-learned-2021/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/learned/what-i-learned-2021/</guid>
      <description>2021-12-13 자바스크립트의 프로토타입에 관해 철학적으로 접근한 좋은 글을 발견하여 정리해둔다. 아래는 결정적으로 유용한 부분 발췌! 프로토타입 기반 OOP 언어의 특징은 다음</description>
    </item>
    
    <item>
      <title>Good bye 2020</title>
      <link>https://wacilpong.github.io/blog/post/review/good-bye-2020/</link>
      <pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/good-bye-2020/</guid>
      <description>잘가라 2020년 올해는 개발적으로는 이론을 다지고, 집에서만 활동한 터라 재충전하는 시간이 많았기에 분기별로 작성해본다. 분기별 기록 1분기 2분기 3분기 4</description>
    </item>
    
    <item>
      <title>After reading &lt;code&gt;</title>
      <link>https://wacilpong.github.io/blog/post/review/after-reading-code/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/after-reading-code/</guid>
      <description>by Charles Petzold Bit 모스부호는 점(dot)과 선(dash)으로 이루어진다. 단지 점과 선은 깜빡임의 종류일 뿐이다. 점자는 이진형태(binary)를 지니며 6개의</description>
    </item>
    
    <item>
      <title>After reading &lt;how js works&gt;</title>
      <link>https://wacilpong.github.io/blog/post/review/after-reading-how-js-works/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/after-reading-how-js-works/</guid>
      <description>by Douglas Crockford 시작하기 전에 자바스크립트는 이상한 corner case와 edge case로 가득 차 있다. corner case: 에상하지 못한 환경이나 입력 데이터 등으로 인해 프로그램에 문제가 발생하</description>
    </item>
    
    <item>
      <title>Rxjs marble testing with jasmine-marbles</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/rxjs-marble-testing/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/rxjs-marble-testing/</guid>
      <description>What is marble diagram? 마블 다이어그램은 위 사진처럼 일련의 시간 흐름에서 발생(emit)되는 값을 조각으로 명시하는 것이다. 어떠한 sequence 중에서 일정 부분을 포착해놓은 것이라</description>
    </item>
    
    <item>
      <title>After reading &lt;concepts of programming languages&gt;</title>
      <link>https://wacilpong.github.io/blog/post/review/after-reading-concepts-of-programming-languages/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/after-reading-concepts-of-programming-languages/</guid>
      <description>by Robert W. Sebesta 프로그래밍 언어론을 읽고 내맘대로 정리해보았다. [기본적인 사항] 프로그래밍 언어의 어휘항목은 수치 리터럴, operator, 특수어를 포함한다. 프로그램은 문자</description>
    </item>
    
    <item>
      <title>Algorithm basic 3</title>
      <link>https://wacilpong.github.io/blog/post/computer-science/algorithm-basic-3/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/computer-science/algorithm-basic-3/</guid>
      <description>칸아카데미의 알고리즘 코스를 들으며 정리해본 알고리즘 기초. https://ko.khanacademy.org/computing/computer-science/algorithms 그래프 표현 그래프는 순환여부에 따라 순환, 비순환 그래프가 있다. 그래프는 방향여부에 따라 방향</description>
    </item>
    
    <item>
      <title>Algorithm basic 2</title>
      <link>https://wacilpong.github.io/blog/post/computer-science/algorithm-basic-2/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/computer-science/algorithm-basic-2/</guid>
      <description>칸아카데미의 알고리즘 코스를 들으며 정리해본 알고리즘 기초. https://ko.khanacademy.org/computing/computer-science/algorithms 좀더 빠른 정렬? feat. 재귀적 알고리즘 설계 선택정렬과 삽입정렬의 최대 실행시간은 O(n^2)이다</description>
    </item>
    
    <item>
      <title>Algorithm basic 1</title>
      <link>https://wacilpong.github.io/blog/post/computer-science/algorithm-basic-1/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/computer-science/algorithm-basic-1/</guid>
      <description>칸아카데미의 알고리즘 코스를 들으며 정리해본 알고리즘 기초. https://ko.khanacademy.org/computing/computer-science/algorithms 알고리즘 어떤 문제를 해결하기 위한 절차의 집합 컴퓨터 과학에서 알고리즘은 프로그램이 어떤 문제를</description>
    </item>
    
    <item>
      <title>Closure, especially in javascript</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/closure-especially-in-javascript/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/closure-especially-in-javascript/</guid>
      <description>클로저는 고차함수(함수를 반환하는 함수) 개념을 이용하여 스코프로 묶인 식별자를 바인딩하기 위한 일종의 기법이다. 클로저는 스코프 내의 실행 컨텍스트가 사라져</description>
    </item>
    
    <item>
      <title>Drag and drop API</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/drag-and-drop/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/drag-and-drop/</guid>
      <description>Draggable HTML5의 모든 요소에는 draggable이라는 속성을 붙일 수 있다. &amp;lt;p draggable=&amp;#34;true&amp;#34;&amp;gt;drag01&amp;lt;/p&amp;gt; &amp;lt;h3 draggable=&amp;#34;true&amp;#34;&amp;gt;drag02&amp;lt;/h3&amp;gt; &amp;lt;div draggable=&amp;#34;true&amp;#34;&amp;gt;drag03&amp;lt;/div&amp;gt; ... 이 속성이 적용된 요소를 이용해 드래그 이벤트를 활용할 수 있고 DragEvent, DataTransfer 와</description>
    </item>
    
    <item>
      <title>Scroll restoration</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/scroll-restoration/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/scroll-restoration/</guid>
      <description>재미있는 현상을 발견했다. 스크롤을 내리다가 특정 페이지로 이동 후, 다시 전 페이지로 이동(뒤로가기)하면 스크롤 위치를 기억하지 못하는 것이다. 왜 이럴까 한번</description>
    </item>
    
    <item>
      <title>Partial function and currying in javascript</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/currying-vs-partial-function/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/currying-vs-partial-function/</guid>
      <description>Partial Function const sum = (a, b) =&amp;gt; a + b; const sum10 = sum.bind(null, 10); sum10(5); // 15 부분함수는 어떤 함수의 arguments에서 일부를 고정하여 원래 함수를 반환하는 함수이다. 즉, 함수를 체이닝하</description>
    </item>
    
    <item>
      <title>Babel polyfill and babel runtime</title>
      <link>https://wacilpong.github.io/blog/post/configuration/babel-polyfill-and-babel-runtime/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/configuration/babel-polyfill-and-babel-runtime/</guid>
      <description>Babel ? 바벨은 Javascript ES6+ 문법을 ES5로 변환해서 ES6+ 문법을 지원하지 않는 브라우저에서도 동작하도록 만들어주는 컴파일러 이다. 그리고 Javascript라는 같은 언</description>
    </item>
    
    <item>
      <title>Test with jest the untranspiled external libraries</title>
      <link>https://wacilpong.github.io/blog/post/configuration/untranspiled-published-external-library/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/configuration/untranspiled-published-external-library/</guid>
      <description>jest in CRA // react-scripts/config/jest/babelTransform.js const babelJest = require(&amp;#34;babel-jest&amp;#34;); module.exports = babelJest.createTransformer({ presets: [require.resolve(&amp;#34;babel-preset-react-app&amp;#34;)], babelrc: false, configFile: false }); create-react-app 로 만들어진 리액트 프로젝트에는 jest가 이미 적용되어 있는데, react-scripts 의 jest 설정부분을 보면 알 수 있다. 그런데 jes</description>
    </item>
    
    <item>
      <title>2020</title>
      <link>https://wacilpong.github.io/blog/learned/what-i-learned-2020/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/learned/what-i-learned-2020/</guid>
      <description>2020-12-23 rxjs animationFrameScheduler는 window.requestAnimationFrame가 실행될 때 작업을 수행하는 오퍼레이</description>
    </item>
    
    <item>
      <title>Good bye 2019</title>
      <link>https://wacilpong.github.io/blog/post/review/good-bye-2019/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/good-bye-2019/</guid>
      <description>난생 처음 쓰는 회고. 간단하게 월별로 내가 뭘 했는지 한번 기록해보자. 월별기록 1월, 2월 프론트엔드 개발자, 혹은 팬케이크형 인간으로의 진화 이직을 결심하게 된</description>
    </item>
    
    <item>
      <title>After reading &lt;clean architecture&gt;</title>
      <link>https://wacilpong.github.io/blog/post/review/after-reading-clean-architecture/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/after-reading-clean-architecture/</guid>
      <description>by Robert C. Martine 클린 아키텍쳐를 읽고 내맘대로 정리해보았다. 컴포넌트 모든 언어에서 컴포넌트는 배포할 수 있는 단위 입자 동일한 시점에 동일한 이유로 변경되는 것들을 한데</description>
    </item>
    
    <item>
      <title>Hoisting about function</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/hoisting-about-function/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/hoisting-about-function/</guid>
      <description>First of all, what is execution context ? 자바스크립트는 실행하는 코드가 기억하고 있는 환경이 존재하는데, 이 환경정보가 바로 실행 컨텍스트다. 이 컨텍스트를 구성할 수 있는 방법은 전역</description>
    </item>
    
    <item>
      <title>Splice Array</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/splice-your-array/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/splice-your-array/</guid>
      <description>가끔 Array.prototype.splice()가 굉장히 헷갈릴 때가 있는데, 그게 언제냐면 이 값을 할당할 때! Sometimes I confused about Array.prototype.splice() function, especially when assign the returned value from this ! Array.prototype.splice() do</description>
    </item>
    
    <item>
      <title>Prerender Status Code</title>
      <link>https://wacilpong.github.io/blog/post/configuration/prerender-status-code/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/configuration/prerender-status-code/</guid>
      <description>재직중인 회사에서 헤드리스 브라우저(headless browser)를 이용한 SEO를 다뤄보면서 여러 시행착오를 겪었다. SSR(Server Side Rendering)을</description>
    </item>
    
    <item>
      <title>File structure with React</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/react-file-structure/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/react-file-structure/</guid>
      <description>Why I am considering it 앵귤러 5+로 프로젝트를 진행하다가 리액트를 쓰게 되었는데, 앵귤러는 처음 1.x버전부터 본인을 MVW(Model-View-Whateve</description>
    </item>
    
    <item>
      <title>Shadow DOM vs Virtual DOM</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/shadow-or-virtual/</link>
      <pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/shadow-or-virtual/</guid>
      <description>DOM, Die Or March ? :P DOM(Document Object Model), is literally a structured model by objects. In other words, DOM represents the web-page (documents) by object-oriented. Web browsers handle the DOM, and we can interact with it using Javascript and CSS. BUT, when we manipulate the DOM, it takes long bcuz of the rendering calculation (reflow and repaint). DOM은 말 그대로 오브젝트</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s Last Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-10/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-10/</guid>
      <description>Truffle Tutorial: Pet Shop 솔직히 문서가 너무 잘되어 있어서 주요 내용+커맨드만 정리한다. https://truffleframework.com/tutorials/pet-shop 1. init vs unbox truffle init: Create empty truffle project without example contracts. truffle unbox: Unpack the exising truffle project. 2. pragma^ ? means &amp;ldquo;additional information that only the compiler cares about&amp;rdquo;. the caret symbol (^) means</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 9th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-9/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-9/</guid>
      <description>Truffle Command 1. 설치 및 버전 확인: 아래의 버전내용이 뜨지 않으면 npm i -g truffle로 설치하자. test $ truffle --version Truffle v4.1.14 (core: 4.1.14) Solidity v0.4.24 (solc-js) 2. 트러플 프로젝트 초기화 과정 test $ truffle init Downloading... Unpacking...</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 8th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-8/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-8/</guid>
      <description>해결되기 어려운 블록체인 문제, Oracle Problem? Cosmos Interchain: 수많은 코인이 있고, 이들을 연결하려고 하는 개념 BIA: Blockchain Interoperablility Alliance ex) Aion, iCon, wanchain Cosmos: internet of interchain dApp --------------------------- - [dApp] [dApp]... - - Application(EVM) - - Consensus - - Networking - --------------------------- 이렇게</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 7th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-7/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-7/</guid>
      <description>Token economy project example : example: Toon Hub</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 6th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-6/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-6/</guid>
      <description>* Gas Fee 트랜잭션을 처리하는 데 사용되는 수수료 (송금 / 스마트컨트랙트 배포 및 수정) 채굴자가 받게 된다. GWEI라는 단위를 사용한다. 사용한 gas x gas price, 하지만</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 5th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-5/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-5/</guid>
      <description>* geth REPL (Read Eval Print Loop) REPL will be appeared to you if you start startgethconsole.sh. Practice these geth commands. miner.start() eth.pendingTransactions eth.getTransaction(&amp;#34;{transaction-hash-id}&amp;#34;) eth.blockNumber miner.stop() personal.newAccount() miner.setEtherbase(eth.accounts[1]) pendingTransacrtions: Look at the list of pending transactions. blockNumber: Look at the current block number. setEtherbase(): Change the default account. - web3 Ethereum javascript API, so, can manage ethereum blockchain transactions in web browser. Proxy {_requestManager: a, currentProvider: Proxy, eth: n, db:</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 4th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-4/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-4/</guid>
      <description>참고: Pow(채굴), PoS(이자지급), PoA, DPoS(투표선출), master node(full block + 네트워크 중계) * Make Genesis Block Now 1. puppeth geth설치 및 환경변수 설정까지 끝났다면</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 3rd Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-3/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-3/</guid>
      <description>추신: 이더리움 창시자 비탈릭 부테린(Виталик Бутерин)은 31. Jan. 1994 로, 나랑 생년월일이 똑같다 헉! 3G blockchain: EOS : Steemit, bitshare를 만든 댄 라리머</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 2nd Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-2/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-2/</guid>
      <description>Cryptocurrency !== &amp;lsquo;가상화폐&amp;rsquo; 교환수단, 사회적 약속, 통화량 조절가능한 &amp;lsquo;돈&#39;의 목적을 모두 충족하면서 암호화된 화폐이다. - Bitcoin</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 1st Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-1/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-1/</guid>
      <description>Blockchain Database 기반의 장부라고 보면 된다. 트랜잭션을 해쉬값과 함께 블록(비트코인은 대략 1MB정도의 데이터를 1블록에 담음)에 저장하고, 그 다음 블록은 이전 해쉬값과</description>
    </item>
    
    <item>
      <title>Angular directive example</title>
      <link>https://wacilpong.github.io/blog/post/javascript-html-css/angular-directive/</link>
      <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/javascript-html-css/angular-directive/</guid>
      <description>What is directive ? Use it to attach custom behavior to elements in the DOM.

Basic Example  This is a simple directive to change chevron background-image as clicking the element.
 1. HTML &amp;lt;label appChevron class=&amp;#34;chevron&amp;#34; style=&amp;#34;background-image: url(&amp;#39;/assets/images/arrow-down.svg&amp;#39;);&amp;#34; &amp;gt;&amp;lt;/label&amp;gt; 
2. TS (Of course it needs to be imported to app.module.ts declarations) import { Directive, ElementRef } from &amp;#34;@angular/core&amp;#34;; @Directive({ selector: &amp;#34;[appChevron]&amp;#34; }) export class ChevronValidate { constructor(el: ElementRef) { const div = document.</description>
    </item>
    
    <item>
      <title>When we connect ssh with .pem</title>
      <link>https://wacilpong.github.io/blog/post/configuration/when-connect-ssh/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/configuration/when-connect-ssh/</guid>
      <description>We sometimes need to connect to computer in other network. It is necessary the key like pem(Private Enhanced Mail) When we connect. I will just write the flow about it.

flow  Generate .pem key (I am using AWS). Change mode of .pem file to 400 to read it. Identify file and connect to ssh (AWS linux for me). DONE  

Change permission of file I will change mode of key file and connect to ssh with it.</description>
    </item>
    
    <item>
      <title>Publish to aws s3 with s3cmd</title>
      <link>https://wacilpong.github.io/blog/post/configuration/aws-publish-to-s3/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/configuration/aws-publish-to-s3/</guid>
      <description>1. Create S3 bucket Create S3 bucket with public access in aws S3 console, because it is just for testing. And add static website hosting property with index.html (entry point).

2. Create CloudFront Distributions Create in aws CloudFront console. And Just keep all settings.

3. Connect domain with CloudFront If you don&#39;t have routing domain in aws Route 53 console, create it first like test.example.com. It just depends on your url rules.</description>
    </item>
    
    <item>
      <title>To configure https with AWS</title>
      <link>https://wacilpong.github.io/blog/post/configuration/set-https-with-aws/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/configuration/set-https-with-aws/</guid>
      <description>flow Request a certification for SSL/TLS in ACM (AWS Certificate Manager). Create ELB (Elastic Load Balancer) from EC2 management console. Create EC2 instance, and connect to ELB. Create record set or new hosted zone, and set alias the ELB in Route53. Access SSH with the keypair that can be generated while creating EC2 instance. Now we can access public IP if we didn&#39;t configure anything in AWS console. So, connect</description>
    </item>
    
    <item>
      <title>To set virtual python environment with mongoDB</title>
      <link>https://wacilpong.github.io/blog/post/configuration/pyvenv-with-mongodb/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/configuration/pyvenv-with-mongodb/</guid>
      <description>Step 1. Install python and mongoDB I am using homebrew. So it can be possible to use brew command. Oh, and macOS actually has a python(2.x), but I need 3.x version so I installed it. 맥에는 파이썬 2.x 버전으로 이미 설치되어 있지만, 나는 3.x버전이 필요해서 따로</description>
    </item>
    
    <item>
      <title>My recently junior web developer interview</title>
      <link>https://wacilpong.github.io/blog/post/review/my-recently-interview/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/post/review/my-recently-interview/</guid>
      <description>what kind of companies? 힙한 분위기를 느끼고 싶어서 스타트업만 건드렸다. 블록체인, 핀테크, 클라우드IDE, AI 등등 다양한 분야의 회사에 신입 개발자로 지원했다. 프론트엔</description>
    </item>
    
  </channel>
</rss>