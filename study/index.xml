<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Studies on Roomy</title>
    <link>https://wacilpong.github.io/blog/study/</link>
    <description>Recent content in Studies on Roomy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Tue, 26 Apr 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wacilpong.github.io/blog/study/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>After reading Rust book chapter 6</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-6/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-6/</guid>
      <description>1. 대수적 타입(Algebraic data type) 러스트의 enum은 함수형 언어들의 대수자료형(algebraic data types)에 가깝다. 정수론은 각종 숫자의</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 5</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-5/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-5/</guid>
      <description>1. 구조체(Structs) 정의와 인스턴스 생성 struct User { active: bool, username: String, email: String, sign_in_count: u64, } fn main() { let user1 = User { email: String::from(&amp;#34;someone@example.com&amp;#34;), username: String::from(&amp;#34;someusername123&amp;#34;), active: true, sign_in_count: 1, }; let mut user2 = User { // same } user2.email = String::from(&amp;#34;anotheremail@example.com&amp;#34;); } 구조체는 튜플</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 4</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-4/</link>
      <pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-4/</guid>
      <description>소유권 (Ownership) 배경 ownership은 rust가 메모리를 어떻게 관리하는지에 대해 제어하는 일련의 규칙이다. 가비지 컬렉터나 개발자가 임의로 메모리를 해제하는</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 3</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-3/</link>
      <pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-3/</guid>
      <description>Variables and Mutability (1) let fn main() { let x = 5; println!(&amp;#34;The value of x is: {}&amp;#34;, x); x = 6; println!(&amp;#34;The value of x is: {}&amp;#34;, x); } rust에서 모든 변수는 기본적으로 불변하며, 안전하고 쉬운 코드를 작성하기 위함이다. 위</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 2</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-2/</link>
      <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-2/</guid>
      <description>guessing game 입출력 붙이기 use std::io; fn main() { println!(&amp;#34;Guess the number!&amp;#34;); println!(&amp;#34;Please input your guess.&amp;#34;); let mut guess = String::new(); io::stdin() .read_line(&amp;amp;mut guess) .expect(&amp;#34;Failed to read line&amp;#34;); println!(&amp;#34;You guessed: {}&amp;#34;, guess); } io는 prelude: rust standard library에 있다. rust에서 모든 변수는 불변(im</description>
    </item>
    
    <item>
      <title>After reading Rust book chapter 1</title>
      <link>https://wacilpong.github.io/blog/study/rust/rust-1/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/rust/rust-1/</guid>
      <description>시작! rust같은 low-level의 언어를 공부하면 아래와 같은 점들을 공부할 수 있다. memory management: 메모리 관리 ex. ownership data representation: 모델링 전에 데이터를 어떻게 표현할지? concurrency:</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s Last Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-10/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-10/</guid>
      <description>Truffle Tutorial: Pet Shop 솔직히 문서가 너무 잘되어 있어서 주요 내용+커맨드만 정리한다. https://truffleframework.com/tutorials/pet-shop 1. init vs unbox truffle init: Create empty truffle project without example contracts. truffle unbox: Unpack the exising truffle project. 2. pragma^ ? means &amp;ldquo;additional information that only the compiler cares about&amp;rdquo;. the caret symbol (^) means</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 9th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-9/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-9/</guid>
      <description>Truffle Command 1. 설치 및 버전 확인: 아래의 버전내용이 뜨지 않으면 npm i -g truffle로 설치하자. test $ truffle --version Truffle v4.1.14 (core: 4.1.14) Solidity v0.4.24 (solc-js) 2. 트러플 프로젝트 초기화 과정 test $ truffle init Downloading... Unpacking...</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 8th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-8/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-8/</guid>
      <description>해결되기 어려운 블록체인 문제, Oracle Problem? Cosmos Interchain: 수많은 코인이 있고, 이들을 연결하려고 하는 개념 BIA: Blockchain Interoperablility Alliance ex) Aion, iCon, wanchain Cosmos: internet of interchain dApp --------------------------- - [dApp] [dApp]... - - Application(EVM) - - Consensus - - Networking - --------------------------- 이렇게</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 7th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-7/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-7/</guid>
      <description>Token economy project example : example: Toon Hub</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 6th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-6/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-6/</guid>
      <description>* Gas Fee 트랜잭션을 처리하는 데 사용되는 수수료 (송금 / 스마트컨트랙트 배포 및 수정) 채굴자가 받게 된다. GWEI라는 단위를 사용한다. 사용한 gas x gas price, 하지만</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 5th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-5/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-5/</guid>
      <description>* geth REPL (Read Eval Print Loop) REPL will be appeared to you if you start startgethconsole.sh. Practice these geth commands. miner.start() eth.pendingTransactions eth.getTransaction(&amp;#34;{transaction-hash-id}&amp;#34;) eth.blockNumber miner.stop() personal.newAccount() miner.setEtherbase(eth.accounts[1]) pendingTransacrtions: Look at the list of pending transactions. blockNumber: Look at the current block number. setEtherbase(): Change the default account. - web3 Ethereum javascript API, so, can manage ethereum blockchain transactions in web browser. Proxy {_requestManager: a, currentProvider: Proxy, eth: n, db:</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 4th Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-4/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-4/</guid>
      <description>참고: Pow(채굴), PoS(이자지급), PoA, DPoS(투표선출), master node(full block + 네트워크 중계) * Make Genesis Block Now 1. puppeth geth설치 및 환경변수 설정까지 끝났다면</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 3rd Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-3/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-3/</guid>
      <description>추신: 이더리움 창시자 비탈릭 부테린(Виталик Бутерин)은 31. Jan. 1994 로, 나랑 생년월일이 똑같다 헉! 3G blockchain: EOS : Steemit, bitshare를 만든 댄 라리머</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 2nd Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-2/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-2/</guid>
      <description>Cryptocurrency !== &amp;lsquo;가상화폐&amp;rsquo; 교환수단, 사회적 약속, 통화량 조절가능한 &amp;lsquo;돈&#39;의 목적을 모두 충족하면서 암호화된 화폐이다. - Bitcoin</description>
    </item>
    
    <item>
      <title>Mushroomy&#39;s 1st Blockcahin Story</title>
      <link>https://wacilpong.github.io/blog/study/blockchain/blockchain-1/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wacilpong.github.io/blog/study/blockchain/blockchain-1/</guid>
      <description>Blockchain Database 기반의 장부라고 보면 된다. 트랜잭션을 해쉬값과 함께 블록(비트코인은 대략 1MB정도의 데이터를 1블록에 담음)에 저장하고, 그 다음 블록은 이전 해쉬값과</description>
    </item>
    
  </channel>
</rss>